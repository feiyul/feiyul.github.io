{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"","text":"golang学习记录 作者：feiyu 时间：2018年6月11日 10-23-04 最后编辑日期：2018-06-11 22:25:47 随机数 “math/rand” 包实现了伪随机数生成器 如果使用相同的种子生成的随机数生成器，将会产生相同的随机数序列。 rand.New(rand.NewSource(time.Now().UnixNano())) rand.Seed(42) ”crypto/rand“ 包实现了用于加解密的更安全的随机数生成器（常用方法 func Read(b []byte) (n int, err error)） 包 每个 Go 程序都是由包构成的 程序从 main 包开始运行。 在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问。 函数 多值返回 Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。 变量 var 语句可以出现在包或函数级别 变量声明可以包含初始值，每个变量对应一个。如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。 在函数中，简洁赋值语句 := 可在类型明确的地方代替 var 声明，:= 结构不能在函数外使用,常量不能用 := 语法声明。 基础类型 整数类型： int8、int16 等等 浮点类型：float32、float64 布尔类型：bool 复数类型： complex64、complex128 字符串类型： string 字符类型： byte（uint8）、rune(int32) golang中的编译器不会做隐式的类型转换，int和int32是俩种不同的类型。 两种不同的整数类型变量不能直接比较，但可以和整型常量（不是const定义，而是if y==1 这种的）比较大小 int, uint 和 uintptr 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽 没有明确初始值的变量声明会被赋予它们的 零值。 在unicode中，一个中文占两个字节，utf-8中一个中文占三个字节，golang默认的编码是utf-8编码 12345str := &quot;hello 世界&quot;fmt.Println(len(str)) //12fmt.Println(utf8.RuneCountInString(str)) //8str2 := []rune(str)fmt.Println(len(str2)) //8 defer 推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。1234567891011121314151617181920212223242526272829303132333435363738func deferRet(x,y int) (z int){ defer func () { fmt.Println(z) z += 100 fmt.Println(z)}() z = x + y fmt.Println(z) return z + 50 // 执行顺序 z = z+50 -&gt; (call defer)z = z+100 -&gt; ret}func main() { i := deferRet(1,1) fmt.Println(i) // print 152}```## slice ##- 如果新的slice容量大小是当前大小2倍以上，则大小增长为新大小- 否则循环以下操作：如果当前slice容量大小小于1024，按每次2倍增长，否则每次按当前大小1/4增长。直到增长的大小超过或等于新大小。## 方法 ##- 就是接收者(结构体，非结构体类型，指针)的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。```gotype MyFloat float64func (f MyFloat) Abs() float64 { if f &lt; 0 { return float64(-f) } return float64(f)}func main() { f := MyFloat(-math.Sqrt2) fmt.Println(f.Abs())} 接口","link":"/2019/05/21/go/2.go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"},{"title":"","text":"golang学习记录 作者：feiyu 时间：2018-06-12 12-45-30 最后编辑日期：2018-06-12 23-48-20 接口 接口类型的值可以保存任何实现了接口方法的值（基础类型，结构体，指针等） 在内部，接口值可以看做事包含只和具体类型的元组（value，type） 当接口值中的value为nil可以用程序加以判断 空接口可以保存任何类型的值，常常用来处理未知类型的值 类型断言 类型断言提供了访问接口值value的方式 123t:=i.(T) //将接口i保存的T类型的value赋值给变量t 若i没有保存T类型的值，会触发恐慌t,ok:=i.(T) //不会触发恐慌，ok=true表示接口包含T类型的值，反之。。。switch v:=i.(type){} //可以用switch语句来判断类型断言，v为类型的value fmt Stringer 是fmt的一个接口，可以用自己的类型实现Stringer来打印值 Print，Printf,println输出 Fprint,Fprintf,Fprintls写入io.Writer Sprint,Sprintfln返回字符串 Errorf将结果字符串包装成error类型 输入类似 Scanner接口(扫描器)–用处很大呀 内建接口 error,error返回nil表示成功，非nil表示失败 123type error interface{ Error() string} 1234567891011type ErrNegativeSqrt float64func (e ErrNegativeSqrt) Error() string { return &quot;cannot Sqrt negative number:&quot; + fmt.Sprint(float64(e))}func Sqrt(x float64) (float64, error) { if x &lt; 0 { return 0, ErrNegativeSqrt(x) } return math.Sqrt(x), nil} io io包指定了io.Reader接口，表示从数据流的末尾进行读取，go标准库有很多对应实现（文件，网络连接，压缩和加密等），包含一个Read方法 1func (T) Read(b []byte)(n int, err error) 待办，实现一个Reader接口，rot13加解密，深入了解io相关的内容 图像 image包定义了Image接口 待办了解image的使用场景，和具体用法 并发 goroutine是go运行时管理的轻量级线程（运行在相同的地址空间） 信道 创建 ch:=make(chan int) // 创建 ch:=make(chan int , 100) //带缓冲的信道 信道是带有类型的管道，可以通过信道操作符&lt;-来发送或者接受值 当信道的缓冲区填满后，给信道发送数据会阻塞，当缓冲区空时，接收方会阻塞 发送方可以调用close(ch)关闭信道，接受方可以通过v,ok:&lt;-ch来判断信道是否关闭，当ok等于false表示信道关闭，循环for i:=range c会不断从信道接受参数，直到信道值取完，并且关闭 select语句可以使一个go程等待多个通信操作，会一直阻塞直到某个分支可以执行，多分支准备好随机执行一个，当所有分支都阻塞但是存在default时，会执行default分支 互斥 标准库提供sync.Mutex互斥锁和两个方法Lock和Unlock() 同步组 sync.WaitGroup和三个方法Add,Wait,Done;Add往同步组添加go程数量，Done删除，Wait用来阻塞等待同步组中全部go程执行完成","link":"/2019/05/21/go/3.go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"route","text":"","link":"/2021/04/23/java/route/"},{"title":"","text":"Cucumber学习官网及插件 官方网址：https://cucumber.io/ IDE工具插件地址：https://cucumber.io/docs/tools/java/#maven 2021-02-25Induction概念：What is Cucumber?Ok, now that you know that BDD is about discovery, collaboration and examples (and not testing), let’s take a look at Cucumber. Cucumber reads executable specifications written in plain text and validates that the software does what those specifications say. The specifications consists of multiple examples, or scenarios. For example: 1234Scenario: Breaker guesses a word Given the Maker has chosen a word When the Breaker makes a guess Then the Maker is asked to score Each scenario is a list of steps for Cucumber to work through. Cucumber verifies that the software conforms with the specification and generates a report indicating ✅ success or ❌ failure for each scenario. In order for Cucumber to understand the scenarios, they must follow some basic syntax rules, called Gherkin. What is Gherkin?Gherkin is a set of grammar rules that makes plain text structured enough for Cucumber to understand. The scenario above is written in Gherkin. Gherkin serves multiple purposes: Unambiguous executable specification Automated testing using Cucumber Document how the system actually behaves The Cucumber grammar exists in different flavours for many spoken languages so that your team can use the keywords in your own language. Gherkin documents are stored in .feature text files and are typically versioned in source control alongside the software. See the Gherkin reference for more details. What are Step Definitions?Step definitions connect Gherkin steps to programming code. A step definition carries out the action that should be performed by the step. So step definitions hard-wire the specification to the implementation. 12345┌────────────┐ ┌──────────────┐ ┌───────────┐│ Steps │ │ Step │ │ ││ in Gherkin ├──matched with──&gt;│ Definitions ├───manipulates──&gt;│ System ││ │ │ │ │ │└────────────┘ └──────────────┘ └───────────┘ 目标： Install Cucumber Write your first Scenario using the Gherkin syntax Write your first step definition in Java Run Cucumber Learn the basic workflow of Behaviour-Driven Development (BDD) With Mavenstep:1、初始化maven archetype 123456789mvn archetype:generate \\ &quot;-DarchetypeGroupId=io.cucumber&quot; \\ &quot;-DarchetypeArtifactId=cucumber-archetype&quot; \\ &quot;-DarchetypeVersion=6.8.1&quot; \\ &quot;-DgroupId=hellocucumber&quot; \\ &quot;-DartifactId=hellocucumber&quot; \\ &quot;-Dpackage=hellocucumber&quot; \\ &quot;-Dversion=1.0.0-SNAPSHOT&quot; \\ &quot;-DinteractiveMode=false&quot; 2、执行命令： mvn test Scenariostep:1、创建一个feature文件 1234567Feature: Is it Friday yet? Everybody wants to know when it's Friday Scenario: Sunday isn't Friday Given today is Sunday When I ask whether it's Friday yet Then I should be told &quot;Nope&quot; 2、执行命令 mvn test 从结果看是没有对featuew文件的step进行声明 3、拷贝以下内容到StepDefinitions 1234567891011121314151617181920@Given(&quot;today is Sunday&quot;)public void today_is_sunday() { // Write code here that turns the phrase above into concrete actions throw new io.cucumber.java.PendingException();}Some other steps were also undefined:@When(&quot;I ask whether it's Friday yet&quot;)public void i_ask_whether_it_s_friday_yet() { // Write code here that turns the phrase above into concrete actions throw new io.cucumber.java.PendingException();}@Then(&quot;I should be told {string}&quot;)public void i_should_be_told(String string) { // Write code here that turns the phrase above into concrete actions throw new io.cucumber.java.PendingException();} 继续执行 mvn test Gherkin Syntax中文写法中文编写feature文件，需要在文件第一行写上：language:zh-CN feature 功能 background 背景 scenario 场景 scenario_outline 场景大纲 example 例子 given 假如 then 那么 and 而且 but 但是 when 当 API Automation(Karate)Maven dependency123456789101112&lt;dependency&gt; &lt;groupId&gt;com.intuit.karate&lt;/groupId&gt; &lt;artifactId&gt;karate-apache&lt;/artifactId&gt; &lt;version&gt;0.6.0&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.intuit.karate&lt;/groupId&gt; &lt;artifactId&gt;karate-junit4&lt;/artifactId&gt; &lt;version&gt;0.6.0&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 也是使用.feature文件；建议最好与java类并排放着 使用与Cucumber一样，需要一个运行Feature文件的Runner类；不同的是没有步骤定义。 建立一个Runner类： 123@RunWith(Karate.class)public class TestRunner {} Feature文件： 12345Feature: Test www.baidu.com Scenario: Get page html info Given url 'https://www.baidu.com' When method get Then status 200 API Automation(restAssured)参考文档：https://rest-assured.io/ 美化报告参考地址：https://github.com/damianszczepanik/cucumber-reporting Jenkins配置：https://github.com/jenkinsci/cucumber-reports-plugin/wiki/Detailed-Configuration maven插件： 12345&lt;dependency&gt; &lt;groupId&gt;net.masterthought&lt;/groupId&gt; &lt;artifactId&gt;cucumber-reporting&lt;/artifactId&gt; &lt;version&gt;5.5.2&lt;/version&gt; &lt;/dependency&gt; 2021-02-26Browser Automationjava lib https://www.selenium.dev/documentation/en/selenium_installation/installing_selenium_libraries/ 浏览器驱动下载：https://www.selenium.dev/documentation/en/webdriver/driver_requirements/ 问题及思考 1、数据流向 2、基于sso的API访问 3、如何更好的封装到统一平台 4、还有哪些可以做到更好 如果是UI自动化，页面元素经常变化 如何维护 如何写算是最好 feature文件是否在翻译一遍有必要吗 Katalon studio: https://blog.csdn.net/kiraelfa/article/details/109071268","link":"/2021/03/04/%E6%B5%8B%E8%AF%95/Cucumber%E5%AD%A6%E4%B9%A0/"},{"title":"","text":"","link":"/2021/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/solid/"},{"title":"jvm","text":"","link":"/2021/04/23/java/jvm/jvm/"}],"tags":[{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"}],"categories":[]}