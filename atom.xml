<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feiyu的博客</title>
  
  
  <link href="https://justhj.top/atom.xml" rel="self"/>
  
  <link href="https://justhj.top/"/>
  <updated>2021-04-25T11:16:12.517Z</updated>
  <id>https://justhj.top/</id>
  
  <author>
    <name>Fei Yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>route</title>
    <link href="https://justhj.top/2c42079.html"/>
    <id>https://justhj.top/2c42079.html</id>
    <published>2021-04-23T10:00:22.000Z</published>
    <updated>2021-04-25T11:16:12.517Z</updated>
    
    
    
    
    
    <category term="测试" scheme="https://justhj.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="https://justhj.top/f0675471.html"/>
    <id>https://justhj.top/f0675471.html</id>
    <published>2021-04-23T10:00:22.000Z</published>
    <updated>2021-04-25T11:22:21.924Z</updated>
    
    
    
    
    
    <category term="测试" scheme="https://justhj.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://justhj.top/0.html"/>
    <id>https://justhj.top/0.html</id>
    <published>2021-04-23T02:37:18.328Z</published>
    <updated>2021-04-25T11:16:12.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://justhj.top/0.html"/>
    <id>https://justhj.top/0.html</id>
    <published>2021-03-04T05:19:28.434Z</published>
    <updated>2021-04-25T11:16:12.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cucumber学习"><a href="#Cucumber学习" class="headerlink" title="Cucumber学习"></a>Cucumber学习</h1><h2 id="官网及插件"><a href="#官网及插件" class="headerlink" title="官网及插件"></a>官网及插件</h2><ul><li>官方网址：<a href="https://cucumber.io/">https://cucumber.io/</a></li><li>IDE工具插件地址：<a href="https://cucumber.io/docs/tools/java/#maven">https://cucumber.io/docs/tools/java/#maven</a></li></ul><h2 id="2021-02-25"><a href="#2021-02-25" class="headerlink" title="2021-02-25"></a>2021-02-25</h2><h2 id="Induction"><a href="#Induction" class="headerlink" title="Induction"></a>Induction</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><h1 id="What-is-Cucumber"><a href="#What-is-Cucumber" class="headerlink" title="What is Cucumber?"></a>What is Cucumber?</h1><p>Ok, now that you know that BDD is about discovery, collaboration and examples (and not testing), let’s take a look at Cucumber.</p><p>Cucumber reads executable specifications written in plain text and validates that the software does what those specifications say. The specifications consists of multiple <em>examples</em>, or <em>scenarios</em>. For example:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Scenario</span>: Breaker guesses a word</span><br><span class="line">  <span class="keyword">Given</span> the Maker has chosen a word</span><br><span class="line">  <span class="keyword">When</span> the Breaker makes a guess</span><br><span class="line">  <span class="keyword">Then</span> the Maker is asked to score</span><br></pre></td></tr></table></figure><p>Each scenario is a list of <em>steps</em> for Cucumber to work through. Cucumber verifies that the software conforms with the specification and generates a report indicating ✅ success or ❌ failure for each scenario.</p><p>In order for Cucumber to understand the scenarios, they must follow some basic syntax rules, called <a href="https://cucumber.io/docs/gherkin/">Gherkin</a>.</p><h1 id="What-is-Gherkin"><a href="#What-is-Gherkin" class="headerlink" title="What is Gherkin?"></a>What is Gherkin?</h1><p>Gherkin is a set of grammar rules that makes plain text structured enough for Cucumber to understand. The scenario above is written in Gherkin.</p><p>Gherkin serves multiple purposes:</p><ul><li>Unambiguous executable specification</li><li>Automated testing using Cucumber</li><li>Document how the system <em>actually</em> behaves</li></ul><p><img src="https://cucumber.io/img/single-source-of-truth-256x256.png" alt="Single source of Truth"></p><p>The Cucumber grammar exists in different flavours for many <a href="https://cucumber.io/docs/gherkin/reference#spoken-languages">spoken languages</a> so that your team can use the keywords in your own language.</p><p>Gherkin documents are stored in <code>.feature</code> text files and are typically versioned in source control alongside the software.</p><p>See the <a href="https://cucumber.io/docs/gherkin">Gherkin reference</a> for more details.</p><h1 id="What-are-Step-Definitions"><a href="#What-are-Step-Definitions" class="headerlink" title="What are Step Definitions?"></a>What are Step Definitions?</h1><p><a href="https://cucumber.io/docs/cucumber/step-definitions">Step definitions</a> connect Gherkin steps to programming code. A step definition carries out the action that should be performed by the step. So step definitions hard-wire the specification to the implementation.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌────────────┐                 ┌──────────────┐                 ┌───────────┐</span><br><span class="line">│   Steps    │                 │     Step     │                 │           │</span><br><span class="line">│ in Gherkin ├──matched with──&gt;│ Definitions  ├───manipulates──&gt;│  System   │</span><br><span class="line">│            │                 │              │                 │           │</span><br><span class="line">└────────────┘                 └──────────────┘                 └───────────┘</span><br></pre></td></tr></table></figure><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><ul><li>Install Cucumber</li><li>Write your first Scenario using the Gherkin syntax</li><li>Write your first step definition in Java</li><li>Run Cucumber</li><li>Learn the basic workflow of Behaviour-Driven Development (BDD)</li></ul><h3 id="With-Maven"><a href="#With-Maven" class="headerlink" title="With Maven"></a>With Maven</h3><h4 id="step"><a href="#step" class="headerlink" title="step:"></a>step:</h4><p>1、初始化maven archetype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate                      \</span><br><span class="line">   &quot;-DarchetypeGroupId&#x3D;io.cucumber&quot;           \</span><br><span class="line">   &quot;-DarchetypeArtifactId&#x3D;cucumber-archetype&quot; \</span><br><span class="line">   &quot;-DarchetypeVersion&#x3D;6.8.1&quot;               \</span><br><span class="line">   &quot;-DgroupId&#x3D;hellocucumber&quot;                  \</span><br><span class="line">   &quot;-DartifactId&#x3D;hellocucumber&quot;               \</span><br><span class="line">   &quot;-Dpackage&#x3D;hellocucumber&quot;                  \</span><br><span class="line">   &quot;-Dversion&#x3D;1.0.0-SNAPSHOT&quot;                 \</span><br><span class="line">   &quot;-DinteractiveMode&#x3D;false&quot;</span><br></pre></td></tr></table></figure><p>2、执行命令：</p><p>mvn test</p><p><img src="C:\Users\chenlei\AppData\Roaming\Typora\typora-user-images\1614220068903.png" alt="1614220068903"></p><h3 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h3><h4 id="step-1"><a href="#step-1" class="headerlink" title="step:"></a>step:</h4><p>1、创建一个feature文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Feature: Is it Friday yet?</span><br><span class="line">  Everybody wants to know when it&#39;s Friday</span><br><span class="line"></span><br><span class="line">  Scenario: Sunday isn&#39;t Friday</span><br><span class="line">    Given today is Sunday</span><br><span class="line">    When I ask whether it&#39;s Friday yet</span><br><span class="line">    Then I should be told &quot;Nope&quot;</span><br></pre></td></tr></table></figure><p>2、执行命令</p><p>mvn  test</p><p><img src="C:\Users\chenlei\AppData\Roaming\Typora\typora-user-images\1614220710565.png" alt="1614220710565"></p><p>从结果看是没有对featuew文件的step进行声明</p><p>3、拷贝以下内容到StepDefinitions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Given(&quot;today is Sunday&quot;)</span><br><span class="line">public void today_is_sunday() &#123;</span><br><span class="line">    &#x2F;&#x2F; Write code here that turns the phrase above into concrete actions</span><br><span class="line">    throw new io.cucumber.java.PendingException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Some other steps were also undefined:</span><br><span class="line"></span><br><span class="line">@When(&quot;I ask whether it&#39;s Friday yet&quot;)</span><br><span class="line">public void i_ask_whether_it_s_friday_yet() &#123;</span><br><span class="line">    &#x2F;&#x2F; Write code here that turns the phrase above into concrete actions</span><br><span class="line">    throw new io.cucumber.java.PendingException();</span><br><span class="line">&#125;</span><br><span class="line">@Then(&quot;I should be told &#123;string&#125;&quot;)</span><br><span class="line">public void i_should_be_told(String string) &#123;</span><br><span class="line">    &#x2F;&#x2F; Write code here that turns the phrase above into concrete actions</span><br><span class="line">    throw new io.cucumber.java.PendingException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续执行 mvn test</p><p><img src="C:\Users\chenlei\AppData\Roaming\Typora\typora-user-images\1614221824528.png" alt="1614221824528"></p><h2 id="Gherkin-Syntax"><a href="#Gherkin-Syntax" class="headerlink" title="Gherkin Syntax"></a>Gherkin Syntax</h2><h3 id="中文写法"><a href="#中文写法" class="headerlink" title="中文写法"></a>中文写法</h3><p>中文编写feature文件，需要在文件第一行写上：<strong>language:zh-CN</strong></p><table><thead><tr><th><strong>feature</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>background</strong></td><td><strong>背景</strong></td></tr><tr><td><strong>scenario</strong></td><td><strong>场景</strong></td></tr><tr><td><strong>scenario_outline</strong></td><td><strong>场景大纲</strong></td></tr><tr><td><strong>example</strong></td><td><strong>例子</strong></td></tr><tr><td><strong>given</strong></td><td><strong>假如</strong></td></tr><tr><td><strong>then</strong></td><td><strong>那么</strong></td></tr><tr><td><strong>and</strong></td><td><strong>而且</strong></td></tr><tr><td><strong>but</strong></td><td><strong>但是</strong></td></tr><tr><td><strong>when</strong></td><td><strong>当</strong></td></tr></tbody></table><h2 id="API-Automation-Karate"><a href="#API-Automation-Karate" class="headerlink" title="API Automation(Karate)"></a>API Automation(Karate)</h2><h3 id="Maven-dependency"><a href="#Maven-dependency" class="headerlink" title="Maven dependency"></a>Maven dependency</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.intuit.karate&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;karate-apache&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.6.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.intuit.karate&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;karate-junit4&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.6.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>也是使用.feature文件；建议最好与java类并排放着</p><p>使用与Cucumber一样，需要一个运行Feature文件的Runner类；不同的是没有步骤定义。</p><p>建立一个Runner类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(Karate.class)</span><br><span class="line">public class TestRunner &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feature文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Feature: Test www.baidu.com</span><br><span class="line">  Scenario: Get page html info</span><br><span class="line">    Given url &#39;https:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">    When method get</span><br><span class="line">    Then status 200</span><br></pre></td></tr></table></figure><h2 id="API-Automation-restAssured"><a href="#API-Automation-restAssured" class="headerlink" title="API Automation(restAssured)"></a>API Automation(restAssured)</h2><p>参考文档：<a href="https://rest-assured.io/">https://rest-assured.io/</a></p><h3 id="美化报告"><a href="#美化报告" class="headerlink" title="美化报告"></a>美化报告</h3><p>参考地址：<a href="https://github.com/damianszczepanik/cucumber-reporting">https://github.com/damianszczepanik/cucumber-reporting</a></p><p>Jenkins配置：<a href="https://github.com/jenkinsci/cucumber-reports-plugin/wiki/Detailed-Configuration">https://github.com/jenkinsci/cucumber-reports-plugin/wiki/Detailed-Configuration</a></p><p>maven插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.masterthought&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cucumber-reporting&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\chenlei\AppData\Roaming\Typora\typora-user-images\1614240576100.png" alt="1614240576100"></p><h2 id="2021-02-26"><a href="#2021-02-26" class="headerlink" title="2021-02-26"></a>2021-02-26</h2><h2 id="Browser-Automation"><a href="#Browser-Automation" class="headerlink" title="Browser Automation"></a>Browser Automation</h2><p>java lib <a href="https://www.selenium.dev/documentation/en/selenium_installation/installing_selenium_libraries/">https://www.selenium.dev/documentation/en/selenium_installation/installing_selenium_libraries/</a></p><p>浏览器驱动下载：<a href="https://www.selenium.dev/documentation/en/webdriver/driver_requirements/">https://www.selenium.dev/documentation/en/webdriver/driver_requirements/</a></p><p><img src="C:\Users\chenlei\AppData\Roaming\Typora\typora-user-images\1614259048629.png" alt="1614259048629"></p><h1 id="问题及思考"><a href="#问题及思考" class="headerlink" title="问题及思考"></a>问题及思考</h1><ul><li><h3 id="1、数据流向"><a href="#1、数据流向" class="headerlink" title="1、数据流向"></a>1、数据流向</h3></li><li><h3 id="2、基于sso的API访问"><a href="#2、基于sso的API访问" class="headerlink" title="2、基于sso的API访问"></a>2、基于sso的API访问</h3></li><li><h3 id="3、如何更好的封装到统一平台"><a href="#3、如何更好的封装到统一平台" class="headerlink" title="3、如何更好的封装到统一平台"></a>3、如何更好的封装到统一平台</h3></li><li><h3 id="4、还有哪些可以做到更好"><a href="#4、还有哪些可以做到更好" class="headerlink" title="4、还有哪些可以做到更好"></a>4、还有哪些可以做到更好</h3><ul><li>如果是UI自动化，页面元素经常变化 如何维护</li><li>如何写算是最好</li><li>feature文件是否在翻译一遍有必要吗</li></ul></li></ul><p>Katalon studio:</p><p><a href="https://blog.csdn.net/kiraelfa/article/details/109071268">https://blog.csdn.net/kiraelfa/article/details/109071268</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cucumber学习&quot;&gt;&lt;a href=&quot;#Cucumber学习&quot; class=&quot;headerlink&quot; title=&quot;Cucumber学习&quot;&gt;&lt;/a&gt;Cucumber学习&lt;/h1&gt;&lt;h2 id=&quot;官网及插件&quot;&gt;&lt;a href=&quot;#官网及插件&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>golang基础</title>
    <link href="https://justhj.top/f0675471.html"/>
    <id>https://justhj.top/f0675471.html</id>
    <published>2018-06-11T14:25:47.000Z</published>
    <updated>2021-04-25T11:21:24.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang学习记录"><a href="#golang学习记录" class="headerlink" title="golang学习记录"></a>golang学习记录</h1><hr><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><ul><li>“math/rand” 包实现了伪随机数生成器</li><li>如果使用相同的种子生成的随机数生成器，将会产生相同的随机数序列。<br>  <code>rand.New(rand.NewSource(time.Now().UnixNano()))   rand.Seed(42)   </code></li><li>”crypto/rand“ 包实现了用于加解密的更安全的随机数生成器（常用方法 func Read(b []byte) (n int, err error)）</li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>每个 Go 程序都是由包构成的</li><li>程序从 main 包开始运行。</li><li>在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>多值返回</li><li>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>var 语句可以出现在包或函数级别</li><li>变量声明可以包含初始值，每个变量对应一个。如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。</li><li>在函数中，简洁赋值语句 := 可在类型明确的地方代替 var 声明，:= 结构不能在函数外使用,常量不能用 := 语法声明。</li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ul><li><p>整数类型： int8、int16 等等</p></li><li><p>浮点类型：float32、float64</p></li><li><p>布尔类型：bool</p></li><li><p>复数类型： complex64、complex128</p></li><li><p>字符串类型： string</p></li><li><p>字符类型： byte（uint8）、rune(int32)</p></li><li><p>golang中的编译器不会做隐式的类型转换，int和int32是俩种不同的类型。</p></li><li><p>两种不同的整数类型变量不能直接比较，但可以和整型常量（不是const定义，而是if y==1 这种的）比较大小</p></li><li><p>int, uint 和 uintptr 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽</p></li><li><p>没有明确初始值的变量声明会被赋予它们的 零值。</p></li><li><p>在unicode中，一个中文占两个字节，utf-8中一个中文占三个字节，golang默认的编码是utf-8编码</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;hello 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str)) <span class="comment">//12</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(str)) <span class="comment">//8</span></span><br><span class="line">str2 := []<span class="keyword">rune</span>(str)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str2)) <span class="comment">//8</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ul><li>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferRet</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(z)</span><br><span class="line">z += <span class="number">100</span></span><br><span class="line">fmt.Println(z)&#125;()</span><br><span class="line">z = x + y</span><br><span class="line">fmt.Println(z)</span><br><span class="line"><span class="keyword">return</span> z + <span class="number">50</span> <span class="comment">// 执行顺序 z = z+50 -&gt; (call defer)z = z+100 -&gt; ret</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := deferRet(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">fmt.Println(i)  <span class="comment">// print 152</span></span><br><span class="line">&#125;<span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## slice ##</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 如果新的slice容量大小是当前大小2倍以上，则大小增长为新大小</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 否则循环以下操作：如果当前slice容量大小小于1024，按每次2倍增长，否则每次按当前大小1/4增长。直到增长的大小超过或等于新大小。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 方法 ##</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 就是接收者(结构体，非结构体类型，指针)的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang学习记录&quot;&gt;&lt;a href=&quot;#golang学习记录&quot; class=&quot;headerlink&quot; title=&quot;golang学习记录&quot;&gt;&lt;/a&gt;golang学习记录&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="golang" scheme="https://justhj.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang基础2</title>
    <link href="https://justhj.top/7e99cc4e.html"/>
    <id>https://justhj.top/7e99cc4e.html</id>
    <published>2018-06-11T14:25:47.000Z</published>
    <updated>2021-04-25T11:22:10.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang学习记录"><a href="#golang学习记录" class="headerlink" title="golang学习记录"></a>golang学习记录</h1><hr><ul><li>作者：feiyu</li><li>时间：2018-06-12 12-45-30</li><li>最后编辑日期：2018-06-12 23-48-20</li></ul><hr><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>接口类型的值可以保存任何实现了接口方法的值（基础类型，结构体，指针等）</li><li>在内部，接口值可以看做事包含只和具体类型的元组（value，type）</li><li>当接口值中的value为nil可以用程序加以判断</li><li>空接口可以保存任何类型的值，常常用来处理未知类型的值</li></ul><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><ul><li>类型断言提供了访问接口值value的方式  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t:=i.(T) <span class="comment">//将接口i保存的T类型的value赋值给变量t 若i没有保存T类型的值，会触发恐慌</span></span><br><span class="line">t,ok:=i.(T) <span class="comment">//不会触发恐慌，ok=true表示接口包含T类型的值，反之。。。</span></span><br><span class="line"><span class="keyword">switch</span> v:=i.(<span class="keyword">type</span>)&#123;&#125; <span class="comment">//可以用switch语句来判断类型断言，v为类型的value</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><ul><li>Stringer 是fmt的一个接口，可以用自己的类型实现Stringer来打印值</li><li>Print，Printf,println输出</li><li>Fprint,Fprintf,Fprintls写入io.Writer</li><li>Sprint,Sprintfln返回字符串</li><li>Errorf将结果字符串包装成error类型</li><li>输入类似</li><li>Scanner接口(扫描器)–用处很大呀</li></ul><h2 id="内建接口"><a href="#内建接口" class="headerlink" title="内建接口"></a>内建接口</h2><ul><li>error,error返回nil表示成功，非nil表示失败   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span>&#123;</span><br><span class="line">Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;cannot Sqrt negative number:&quot;</span> + fmt.Sprint(<span class="keyword">float64</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(x), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="io"><a href="#io" class="headerlink" title="io"></a>io</h2><ul><li>io包指定了io.Reader接口，表示从数据流的末尾进行读取，go标准库有很多对应实现（文件，网络连接，压缩和加密等），包含一个Read方法  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span><span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></li><li>待办，实现一个Reader接口，rot13加解密，深入了解io相关的内容</li></ul><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ul><li>image包定义了Image接口</li><li>待办了解image的使用场景，和具体用法</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li>goroutine是go运行时管理的轻量级线程（运行在相同的地址空间）</li><li>信道<ul><li>创建 ch:=make(chan int) //</li><li>创建 ch:=make(chan int , 100) //带缓冲的信道</li><li>信道是带有类型的管道，可以通过信道操作符&lt;-来发送或者接受值</li><li>当信道的缓冲区填满后，给信道发送数据会阻塞，当缓冲区空时，接收方会阻塞</li><li>发送方可以调用close(ch)关闭信道，接受方可以通过v,ok:&lt;-ch来判断信道是否关闭，当ok等于false表示信道关闭，循环for i:=range c会不断从信道接受参数，直到信道值取完，并且关闭</li><li>select语句可以使一个go程等待多个通信操作，会一直阻塞直到某个分支可以执行，多分支准备好随机执行一个，当所有分支都阻塞但是存在default时，会执行default分支</li></ul></li><li>互斥<ul><li>标准库提供sync.Mutex互斥锁和两个方法Lock和Unlock()</li></ul></li><li>同步组<ul><li>sync.WaitGroup和三个方法Add,Wait,Done;Add往同步组添加go程数量，Done删除，Wait用来阻塞等待同步组中全部go程执行完成</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;golang学习记录&quot;&gt;&lt;a href=&quot;#golang学习记录&quot; class=&quot;headerlink&quot; title=&quot;golang学习记录&quot;&gt;&lt;/a&gt;golang学习记录&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;作者：feiyu&lt;/li&gt;
&lt;li&gt;时间：2018-0</summary>
      
    
    
    
    
    <category term="golang" scheme="https://justhj.top/tags/golang/"/>
    
  </entry>
  
</feed>
